package algorithm.stack;

import java.util.Stack;

/**
 * @author zhuwenwen
 * @date 17:51 27-11-2020
 **/
public class StackSolution {

    /**
     * 给出一个仅包含字符'('和')'的字符串，计算最长的格式正确的括号子串的长度。
     * 对于字符串"(()"来说，最长的格式正确的子串是"()"，长度为2.
     * 再举一个例子：对于字符串")()())",来说，最长的格式正确的子串是"()()"，长度为4.
     *
     * @param s
     * @return
     */
    public int longestValidParentheses(String s) {
        // write code here
        if (s == null || s.length() == 0) {
            return 0;
        }
        Stack<Character> stack = new Stack<>();
        int max = 0, count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(s.charAt(i));
            } else if (s.charAt(i) == ')') {
                if (!stack.isEmpty()) {
                    stack.pop();
                    count++;
                } else {
                    max = max >= count ? max : count;
                    count = 0;
                }
            }
        }
        return (max >= count ? max : count) * 2;
    }

    public static void main(String[] args) {
        StackSolution stackSolution = new StackSolution();
        System.out.println(stackSolution.longestValidParentheses("))())(()))()(((()())(()(((()))))((()(())()((((()))())))())))()(()(()))))())(((())(()()))((())()())((()))(()(())(())((())((((()())()))((()(())()))()(()))))))()))(()))))()())()())()()()()()()()))()(((()()((()(())((()())))(()())))))))(()()(())())(()))))))()()())((((()()()())))))((())(())()()(()((()()))()()())(()())()))()(()(()())))))())()(())(()))(())()(())()((())()((((()()))())(((((())))())())(()((())((()()((((((())))(((())))))))(()()((((((()(((())()(()))(()())((()(((()((()(())())()())(((()))()(((()))))(())))(())()())()(((()))))((())())))())()()))((((()))(())()())()(((())(())(()()((())()())()()())())))((()())(()((()()()(()())(()))(()())((((()(()(((()(((())()((()(()))())()())))))))))))()())()(()(((())()))(((()))((((()())())(()())((()())(()()((()((((()())))()(())(())()))))(())())))))(((((((())(((((()))()))(()()()()))))))(()(()(()(()()(((()()))((()))())((())())()())()))()()(((())))()(())()()(())))(((()))))))))(())((()((()((()))))()()()((())((((((((((()(())))(())((()(()())())(((((((()()()()))())(((()())()(()()))))(()()))))(((()()((()()()(((()))))(()()())()()()(()))))()(())))))))()((((((((()((())))))))(()))()((()())())("));

    }
}
